{"ast":null,"code":"var _jsxFileName = \"/home/master/Documents/IA_Exam/Frontend/src/components/Tabla.js\";\n\n/** @format */\nimport React, { Component } from 'react';\nimport { Tabs, Tab, Container } from 'react-bootstrap';\nimport Order from './Order';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Tabla extends Component {\n  constructor(props) {\n    super();\n\n    this.check_orders = async () => {\n      await fetch('http://localhost:8080/api/transaction/get/all', {\n        method: 'GET',\n        mode: 'cors',\n        // no-cors, *cors, same-origin\n        cache: 'no-cache',\n        // *default, no-cache, reload, force-cache, only-if-cached\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        Object.keys(data.response).map(sku => {\n          const {\n            pending,\n            in_process,\n            completed,\n            delivered,\n            canceled\n          } = this.state;\n\n          switch (data.response[sku].status) {\n            case 'Pending':\n              this.setState({\n                pending: [...pending, {\n                  sku,\n                  status: data.response[sku].status,\n                  orders: data.response[sku].orders\n                }]\n              });\n              break;\n\n            case 'In Process':\n              this.setState({\n                in_process: [...in_process, {\n                  sku,\n                  status: data.response[sku].status,\n                  orders: data.response[sku].orders\n                }]\n              });\n              break;\n\n            case 'Completed':\n              this.setState({\n                completed: [...completed, {\n                  sku,\n                  status: data.response[sku].status,\n                  orders: data.response[sku].orders\n                }]\n              });\n              break;\n\n            case 'Delivered':\n              this.setState({\n                delivered: [...delivered, {\n                  sku,\n                  status: data.response[sku].status,\n                  orders: data.response[sku].orders\n                }]\n              });\n              break;\n\n            case 'Canceled':\n              this.setState({\n                canceled: [...canceled, {\n                  sku,\n                  status: data.response[sku].status,\n                  orders: data.response[sku].orders\n                }]\n              });\n              break;\n\n            default:\n              break;\n          }\n        });\n      });\n    };\n\n    this.state = {\n      pending: [],\n      in_process: [],\n      completed: [],\n      delivered: [],\n      canceled: []\n    };\n  }\n\n  componentDidMount() {\n    this.check_orders();\n  }\n\n  render() {\n    const {\n      pending,\n      in_process,\n      completed,\n      delivered,\n      canceled\n    } = this.state;\n    console.log(pending, in_process, completed, delivered, canceled);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        defaultActiveKey: \"profile\",\n        id: \"uncontrolled-tab-example\",\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"pending\",\n          title: \"Pending\",\n          children: pending.map((element, idx) => {\n            return /*#__PURE__*/_jsxDEV(Order, {\n              id: idx,\n              sku: element.sku,\n              order: element.orders,\n              status: element.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"in_process\",\n          title: \"In Process\",\n          children: in_process.map((element, idx) => {\n            return /*#__PURE__*/_jsxDEV(Order, {\n              id: idx,\n              sku: element.sku,\n              order: element.orders,\n              status: element.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"completed\",\n          title: \"Completed\",\n          children: completed.map((element, idx) => {\n            return /*#__PURE__*/_jsxDEV(Order, {\n              id: idx,\n              sku: element.sku,\n              order: element.orders,\n              status: element.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"delivered\",\n          title: \"Delivered\",\n          children: delivered.map((element, idx) => {\n            return /*#__PURE__*/_jsxDEV(Order, {\n              id: idx,\n              sku: element.sku,\n              order: element.orders,\n              status: element.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"canceled\",\n          title: \"Canceled\",\n          children: canceled.map((element, idx) => {\n            return /*#__PURE__*/_jsxDEV(Order, {\n              id: idx,\n              sku: element.sku,\n              order: element.orders,\n              status: element.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Tabla;","map":{"version":3,"sources":["/home/master/Documents/IA_Exam/Frontend/src/components/Tabla.js"],"names":["React","Component","Tabs","Tab","Container","Order","Tabla","constructor","props","check_orders","fetch","method","mode","cache","headers","then","response","json","data","Object","keys","map","sku","pending","in_process","completed","delivered","canceled","state","status","setState","orders","componentDidMount","render","console","log","element","idx"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { Component } from 'react';\nimport { Tabs, Tab, Container } from 'react-bootstrap';\nimport Order from './Order';\n\nclass Tabla extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            pending: [],\n            in_process: [],\n            completed: [],\n            delivered: [],\n            canceled: [],\n        };\n    }\n    componentDidMount() {\n        this.check_orders();\n    }\n    check_orders = async () => {\n        await fetch('http://localhost:8080/api/transaction/get/all', {\n            method: 'GET',\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                Object.keys(data.response).map((sku) => {\n                    const { pending, in_process, completed, delivered, canceled } = this.state;\n                    switch (data.response[sku].status) {\n                        case 'Pending':\n                            this.setState({\n                                pending: [\n                                    ...pending,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'In Process':\n                            this.setState({\n                                in_process: [\n                                    ...in_process,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'Completed':\n                            this.setState({\n                                completed: [\n                                    ...completed,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'Delivered':\n                            this.setState({\n                                delivered: [\n                                    ...delivered,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'Canceled':\n                            this.setState({\n                                canceled: [\n                                    ...canceled,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        default:\n                            break;\n                    }\n                });\n            });\n    };\n    ren;\n    render() {\n        const { pending, in_process, completed, delivered, canceled } = this.state;\n        console.log(pending, in_process, completed, delivered, canceled);\n        return (\n            <Container fluid>\n                <Tabs defaultActiveKey='profile' id='uncontrolled-tab-example' className='mb-3'>\n                    <Tab eventKey='pending' title='Pending'>\n                        {pending.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='in_process' title='In Process'>\n                        {in_process.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='completed' title='Completed'>\n                        {completed.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='delivered' title='Delivered'>\n                        {delivered.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='canceled' title='Canceled'>\n                        {canceled.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                </Tabs>\n            </Container>\n        );\n    }\n}\nexport default Tabla;\n"]},"metadata":{},"sourceType":"module"}