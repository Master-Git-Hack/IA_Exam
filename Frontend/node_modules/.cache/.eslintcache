[{"/home/master/Documents/IA_Exam/Frontend/src/index.js":"1","/home/master/Documents/IA_Exam/Frontend/src/reportWebVitals.js":"2","/home/master/Documents/IA_Exam/Frontend/src/App.js":"3","/home/master/Documents/IA_Exam/Frontend/src/components/Order.js":"4","/home/master/Documents/IA_Exam/Frontend/src/components/Tabla.js":"5","/home/master/Documents/IA_Exam/Frontend/src/components/Make_Order.js":"6"},{"size":500,"mtime":1633538059292,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1633538059292,"results":"9","hashOfConfig":"8"},{"size":1626,"mtime":1633696413421,"results":"10","hashOfConfig":"8"},{"size":329,"mtime":1633701102395,"results":"11","hashOfConfig":"8"},{"size":5143,"mtime":1633700531328,"results":"12","hashOfConfig":"8"},{"size":3861,"mtime":1633695843732,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ojm7gn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/master/Documents/IA_Exam/Frontend/src/index.js",[],["29","30"],"/home/master/Documents/IA_Exam/Frontend/src/reportWebVitals.js",[],"/home/master/Documents/IA_Exam/Frontend/src/App.js",["31"],"/** @format */\n\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Tabs, Tab, Container } from 'react-bootstrap';\nimport Tabla from './components/Tabla';\nimport Make_Order from './components/Make_Order';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            next_sku: 0,\n        };\n    }\n    componentDidMount() {\n        this.check_orders();\n    }\n    check_orders = async () => {\n        await fetch('http://localhost:8080/api/transaction/get/all', {\n            method: 'GET',\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                this.setState({ next_sku: Object.keys(data.response).length + 1 });\n            });\n    };\n    render() {\n        const { next_sku, orders } = this.state;\n        console.log(orders);\n        return (\n            <Container className='tp-3'>\n                <Tabs defaultActiveKey='profile' id='uncontrolled-tab-example' className='mb-3'>\n                    <Tab eventKey='make_order' title='Make Order'>\n                        <Make_Order sku={next_sku} />\n                    </Tab>\n                    <Tab eventKey='check_orders' title='Check Orders'>\n                        <Tabla />\n                    </Tab>\n                </Tabs>\n            </Container>\n        );\n    }\n}\nexport default App;\n","/home/master/Documents/IA_Exam/Frontend/src/components/Order.js",["32"],"/home/master/Documents/IA_Exam/Frontend/src/components/Tabla.js",["33"],"/** @format */\n\nimport React, { Component } from 'react';\nimport { Tabs, Tab, Container } from 'react-bootstrap';\nimport Order from './Order';\n\nclass Tabla extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            pending: [],\n            in_process: [],\n            completed: [],\n            delivered: [],\n            canceled: [],\n        };\n    }\n    componentDidMount() {\n        this.check_orders();\n    }\n    check_orders = async () => {\n        await fetch('http://localhost:8080/api/transaction/get/all', {\n            method: 'GET',\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                Object.keys(data.response).map((sku) => {\n                    const { pending, in_process, completed, delivered, canceled } = this.state;\n                    switch (data.response[sku].status) {\n                        case 'Pending':\n                            this.setState({\n                                pending: [\n                                    ...pending,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'In Process':\n                            this.setState({\n                                in_process: [\n                                    ...in_process,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'Completed':\n                            this.setState({\n                                completed: [\n                                    ...completed,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'Delivered':\n                            this.setState({\n                                delivered: [\n                                    ...delivered,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        case 'Canceled':\n                            this.setState({\n                                canceled: [\n                                    ...canceled,\n                                    { sku, status: data.response[sku].status, orders: data.response[sku].orders },\n                                ],\n                            });\n                            break;\n                        default:\n                            break;\n                    }\n                });\n            });\n    };\n    ren;\n    render() {\n        const { pending, in_process, completed, delivered, canceled } = this.state;\n        console.log(pending, in_process, completed, delivered, canceled);\n        return (\n            <Container fluid>\n                <Tabs defaultActiveKey='profile' id='uncontrolled-tab-example' className='mb-3'>\n                    <Tab eventKey='pending' title='Pending'>\n                        {pending.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='in_process' title='In Process'>\n                        {in_process.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='completed' title='Completed'>\n                        {completed.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='delivered' title='Delivered'>\n                        {delivered.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                    <Tab eventKey='canceled' title='Canceled'>\n                        {canceled.map((element, idx) => {\n                            return <Order id={idx} sku={element.sku} order={element.orders} status={element.status} />;\n                        })}\n                    </Tab>\n                </Tabs>\n            </Container>\n        );\n    }\n}\nexport default Tabla;\n","/home/master/Documents/IA_Exam/Frontend/src/components/Make_Order.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":40,"column":25,"nodeType":"40","endLine":40,"endColumn":54},{"ruleId":"41","severity":1,"message":"42","line":3,"column":8,"nodeType":"43","messageId":"44","endLine":3,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":32,"column":54,"nodeType":"47","messageId":"48","endLine":32,"endColumn":56},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react/jsx-pascal-case","Imported JSX component Make_Order must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]